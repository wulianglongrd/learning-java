类加载


- 在Java代码中，类型的加载、连接与初始化过程都是在程序运行期间完成的
- 提供了更大的灵活性，增加了更多的可能性


- java虚拟机与程序的生命周期
- 在如下几种情况下，java虚拟机将结束生命周期
 - 执行了System.exit方法
 - 程序正常执行结束
 - 程序在执行过程中遇到了异常或错误而异常终止
 - 由于操作系统出现错误而导致java虚拟机进程终止


类的加载、连接与初史化
1. 加载：查找并加载类的二进制数据
 类的加载指的是将类的.class文件中的二进制数据读入内存中，将其放在运行时的数据区的方法区，然后在
 内存中创建一个java.lang.Class对象（规范并未说明class对象位于哪里，HotSpot虚拟机将期放在了
 方法区中）用来封装类在方法区内数据结构
 - 加载.class文件的方式
  - 从本地系统中直接加载
  - 通过网络下载.class文件
  - 从zip、jar等归档文件中加载.class文件
  - 从专有数据库中提取.class文件
  - 将java源文件动态编译为.class文件
2. 连接
 - 验证：确保被加载的类的正确性
 - 准备：为类的静态变量分配内存，并将其初始化为默认值
 - 解析：把类中的符号引用转换为直接引用
3. 初史化：为类的静太变量赋予正确的初始化值。类或接口"首次主动使用"时才会初始化他们
4. 使用
5. 卸载


java程序对类的使用方式可分为两种
1. 主动使用
 - 创建类的实例
 - 访问某个类或接口的静态变量，或者对该静态变量赋值
 - 调用类的静态方法
 - 反射，如 Class.forName("foo.bar")
 - 初始化一个类的子类
 - java虚拟机启动时被标注为启动类的类，如含main方法的类
 - JDK1.7开始提供的动态语言支持：MethodHandle实例的解析结果REF_getStatic, REF_putStatic, REF_invokeStatic句柄对应的类没有初始化，则初始化
2. 被动使用



