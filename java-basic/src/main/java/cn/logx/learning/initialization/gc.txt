## 终结处理和垃圾回收
- Java有垃圾回收器，负责释放无用对象占据的内存资源。但也有特殊情况：只回收通过new获得的内存区域
- Java允许在类中定义一个名为finalize()的方法。它的工作原理：一量垃圾回收器准备好释放对象占用的存储空间，将首先调用期finalize()方法，并且在下一次垃圾回收动作发生时，才会真正回收对象占用的内存。
   1. 特殊用途：释放 通过某种创建对象方式以外的方式为对象分配了存储空间。如："本地方法"，java调用非java代码
   2. finalize()方法无法预料，普通是危险的，总之是多余的
- java的对象并非总是被垃圾回收：
   1. 对象可能不被垃圾回收
   2. 垃圾回收并不等于"析构"
   3. 垃圾回收只与内存相关
- 如果jvm并未面临内存耗尽的情形，它是不会浪费时间去执行垃圾回收以恢复内存的。


## 垃圾回收器如何工作
- 引用计数
  - 缺陷：如果对象之间存人循环引用，可能会出现"对象应该被回收，但引用计数却不为0"的情况。
- 自适应的垃圾回收技术
  - 思想：对任何"活"的对象，一定能最终追溯到期存活在堆栈或静态存储区之中的引用。
  - 如何找到"活"的对象？
    1. 停止-复制（stop-and-copy）
    2. 标记-清扫（mark-and-sweep）
