如何在运行时识别对象和类的信息？
- "传统的"RTTI，它假定我们在编译时已经知道了所有的类型
- "反射"机制，允许我们在运行时发现和使用类的信息

Class对象
- 所有的类都是在对其第一次使用时，动态加载到JVM中的。当程序创建第一个对类的静态成员引用时，就会加载这个类。
- 构造器是类的静态方法，即使在构造器之前没有使用static关键字。因此，使用new操作符创建类的新对象也会被当作对类的静态成员的引用。

取得对象的引用
- forName()：Class.forName会自动初史化类
- 类字面量常量: Foo.class 不会自动初史化类
  当使用".class"来创建对Class对象的引用时，不会自动地初始化该Class对象。为了使用类而做的准备工作实际包含三个步骤：
  1. 加载，这是由类的加载器执行的。该步骤查找字节码，并从这些字节码中创建一个Class对象。
  2. 链接（为域分配存储空间），在链接阶段将验证类中的字节码，为静态域分配存储空间，并且如果必需的话，将解析这个类创建的对其他类的所有引用。
  3. 初史化（初始化存储空间），如果该类具有超类，则对期初始化，执行静态初史化器和静态初史化块
    初史化被延迟到了对静态方法（构造器也是静态的）或者非"常数静态域"进行首次引用时才执行

