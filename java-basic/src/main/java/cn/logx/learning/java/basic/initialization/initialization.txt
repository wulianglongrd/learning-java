### 初始化顺序
- 在类的内部，变量定义的先后顺序决定初始化的顺序。即使变量定义散布于方法定义之间，它们仍旧会在任何方法（包括构造器）被调用之前得到初始化。


### 静态数据的初史化
- 无论创建多少个对象，静态数据都只占用一份存储区域。
- static关键字不能应用于局部变量，因此它只能作用于域
- 静态初始化只有在必要时刻才会进行。且只初始化一次。
- 初始化的顺序是先静态对象（如果它们尚未因前面的对象创建过程而被初始化），而后是"非静态"对象


### 类的创建过程，假设有个名为Dog的类：
1. 即使没有显示的使用static关键字，构造器实际上也是静态方法。因此，当首次创建类型为Dog的对象时（构造器可以看成静态方法），
或者Dog类的静态方法/静态域首次被访问时，java解释器必须查找类路径，以定位Dog.class文件
2. 然后载入Dog.class，有关静态初始化的所有动作都会执行。因此，静态初始化只在Class对象首次加载的时候进行一次
3. 当用new Dog()创建对象的时候，首先将在堆上为Dog对象分配足够的存储空间
3. 这块存储空间会被清零，这就自动地将Dog对象中的所有基本类型数据都设置成了默认值
5. 执行所有出现于字段定义处理的初始化动作
6. 执行构造器


### 静态代码块（显式静态初史化）
- 与静态初始化动作一样，静态代码块只执行一次：当首次生成这个类的一个对象时，或者首次访问属于那个类的静态数据成员时。


